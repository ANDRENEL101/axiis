<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:charts="org.axiis.charts.*" 
	layout="absolute"
	creationComplete="start();" xmlns:core="org.axiis.core.*" xmlns:axiis="http://www.axiis.org/2009"
	 backgroundGradientColors="[0xDDDDDD,0xF5F5F5]" 
	xmlns:geometry="com.degrafa.geometry.*" xmlns:paint="org.axiis.paint.*" xmlns:degrafa="http://www.degrafa.com/2007" xmlns:states="org.axiis.states.*" xmlns:utils="org.axiis.utils.*" xmlns:Examples="Examples.*" xmlns:layouts="org.axiis.layouts.*">
	<mx:Style>
		ToolTip
		{
			borderSkin:ClassReference('org.axiis.core.HTMLToolTip');
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
		
			import org.axiis.data.DataSet; 
			
			private var ds:DataSet = new DataSet();
			
			public function start():void
			{ 
				
				ds.processXmlString(countryData);
				//Aggregate the detailed data items
				ds.aggregateData(ds.data.object,"country.medal",["count"]);
				//Aggegate the higher level items
				ds.aggregateData(ds.data.object,"country",["aggregates.medal_count_sum"]);
				wedgeScale.maxValue=ds.data.object.aggregates['country_aggregates:medal_count_sum_sum'];
				dataProvider=ds.data.object.country;
				
				dc.invalidateDisplayList();
			}
			
			private function dataTipFunction(data:Object):String
			{
				if(data["competitors"] != null && data["name"] != null)
				{
					return "<b>" + data["name"] + " Total Medals</b><br/>" + data["competitors"];
				}
				else if(data["count"] != null && data["category"] != null)
				{
					return "<b>" + data["category"] + " Total Medals</b><br/>" + data["count"];
				}
				return "";
			}
			
			private function transposeLabel(wedge:Object):Boolean {
			
				
				if( (wedge.startAngle + wedge.arc/2) > 90  && (wedge.startAngle + wedge.arc/2) < 270) {
					return true;
				}
				else {
					return false;
				}
			}
			
			public function colorFunction(val:Object):Number {
				return Number(val) & -0x333333;
			}
			
		]]>
	</mx:Script>
	<mx:Style source="styles/Axiis_Examples.css"/>
	
	
	<mx:String id="countryData" source="data/2008_Olympics.xml"/>
	
	<mx:Number id="angleGap">.5</mx:Number>
	<mx:Number id="innerRadi1">.4</mx:Number>
	<mx:Number id="innerRadi2">.78</mx:Number>
	<mx:Number id="outerRadi1">.78</mx:Number>
	<mx:Number id="outerRadi2">1</mx:Number>
	
	<utils:NumericExpression id="outerRadius" value="{(dc.width/2)*outerRadi2}"/>
	<utils:NumericExpression id="center" value="{boundsRadius.value/2}"/>
	<utils:NumericExpression id="boundsRadius" value="{Math.min(this.height,this.width)*.7}"/>
	
	<utils:NumericExpression id="innerValue" value="{wedgeScale.valueToLayout(wedgeLayout.currentValue)}"/>
	
	<mx:Object id="dataProvider"/>
	<axiis:LinearScale id="wedgeScale" minLayout="0" maxLayout="{360-wedgeLayout.itemCount*angleGap}" minValue="0" dataProvider="{dataProvider}" />
	<axiis:LinearScale id="outerWedgeScale" minLayout="0" maxLayout="{wedgeLayout.currentReference['arc']}" minValue="0" dataProvider="{wedgeLayout.currentDatum}" maxValue="{wedgeLayout.currentDatum.aggregates['medal_count_sum']}"/>
	
	<Examples:ExampleBackground width="{this.width}" height="{this.height}" title="Wedge Stack Graph" subTitle="Custom Visualization"/>
	
	<mx:Label fontSize="16" fontFamily="Myriad Pro" htmlText="2008 Olympic Medals" bottom="{height*.025}" horizontalCenter="0" color="0"/>
	
	
		<axiis:DataCanvas id="dc" width="{boundsRadius.value}" height="{boundsRadius.value}" verticalCenter="0" horizontalCenter="0" showDataTips="false">
			<axiis:layouts>
				<!-- wedgeLayout:  This renders the inner ring of wedges -->
				<axiis:AbsoluteLayout id="wedgeLayout" name="innerLayout" dataProvider="{dataProvider}" width="{dc.width}" height="{dc.width}"  dataField="aggregates.medal_count_sum" labelField="name"
					dataTipLabelFunction="{dataTipFunction}"
					itemPreDraw="{innerLabel.width=innerLabel.textWidth+40; if (transposeLabel(wedgeLayout.currentReference)==true) innerLabel.right=(outerRadius.value-wedgeRenderer.outerRadius) + innerLabel.textWidth + 11; else innerLabel.right=outerRadius.value-wedgeRenderer.outerRadius+10;}">
					<axiis:referenceRepeater>
						<!-- innerRepeater: the reference repeater wedge for the inner ring of wedges -->
						<layouts:GeometryRepeater dataProvider="{wedgeLayout.dataItems}" id="innerRepeater" >
							<layouts:geometry>
								<geometry:Wedge  id="wedge" centerX="{wedgeLayout.width/2}" centerY="{wedgeLayout.width/2}" innerRadius="{(wedgeLayout.width/2)*innerRadi1}" outerRadius="{(wedgeLayout.width/2)*innerRadi2}" startAngle="360" arc="1"/>
							</layouts:geometry>
							<layouts:modifiers>
								<layouts:PropertyModifier property="arc" modifier="{innerValue.value-angleGap}" modifierOperator="none"/>
								<layouts:PropertyModifier property="startAngle" modifier="{innerValue.value+angleGap}" modifierOperator="subtract"/> 
							</layouts:modifiers>
						</layouts:GeometryRepeater>
					</axiis:referenceRepeater>
					<axiis:drawingGeometries>
						<!-- wedgeRenderer: the drawing geometry for the inner ring of wedges -->
						
						<geometry:Wedge x="0" y="0" id="wedgeRenderer" 
						    innerRadius="{wedgeLayout.currentReference['innerRadius']}" outerRadius="{wedgeLayout.currentReference['outerRadius']}"
		 					startAngle="{wedgeLayout.currentReference['startAngle']}" arc="{wedgeLayout.currentReference['arc']}" 
		 					centerX="{wedgeLayout.currentReference['centerX']}" centerY="{wedgeLayout.currentReference['centerY']}"
							fill="{wedgeFill}">
							<geometry:stroke>
								<degrafa:SolidStroke pixelHinting="true" alpha=".5"/>
							</geometry:stroke>
						</geometry:Wedge>
						
						<degrafa:RegularRectangle width="{outerRadius.value}" x="{center.value}" y="{center.value}" height="1" id="innerRect">
							<degrafa:geometry>
								<degrafa:RasterText id="innerLabel" fontFamily="Myriad Pro"  fontSize="13" text="{wedgeLayout.currentLabel}" 
									autoSize="right">
									<degrafa:fill>
										<degrafa:SolidFill color="0xFFFFFF"/>
									</degrafa:fill>
									<degrafa:transform>
										<degrafa:RotateTransform registrationPoint="topRight" angle="{(transposeLabel(wedgeLayout.currentReference)==true) ? 180:0}"/>
									</degrafa:transform>
								</degrafa:RasterText>
							</degrafa:geometry>
							<degrafa:transform>
								<degrafa:RotateTransform angle="{wedgeLayout.currentReference['startAngle'] + wedgeLayout.currentReference['arc']/2+((transposeLabel(wedgeLayout.currentReference)==true) ? 3:-3)}" 
									registrationPoint="topLeft"/>
							</degrafa:transform>
						</degrafa:RegularRectangle>
					</axiis:drawingGeometries>
					<axiis:layouts>
						<!-- outerWedgeRenderer:  The layout for the outer ring of wedges -->
						<axiis:AbsoluteLayout id="outerWedgeLayout"  name=" outerLayout" dataProvider="{wedgeLayout.currentDatum.medal}" width="{dc.width}" height="{dc.width}"  dataField="count" labelField="category"
							itemPreDraw="{outerLabel.width=outerLabel.textWidth+12; if (transposeLabel(outerWedgeLayout.currentReference)==true) outerLabel.right=-3; else outerLabel.right=-outerLabel.textWidth-5;}"
							dataTipLabelFunction="{dataTipFunction}">
							
							<axiis:referenceRepeater>
								<!-- outerRepeater:  the reference geometry for the outer ring of wedges -->
								<layouts:GeometryRepeater dataProvider="{outerWedgeLayout.dataItems}" id="outerRepeater">
									<layouts:geometry>
										<geometry:Wedge  id="outerWedge" centerX="{wedgeLayout.width/2}" centerY="{wedgeLayout.width/2}" innerRadius="{(wedgeLayout.width/2)*outerRadi1}" outerRadius="{(wedgeLayout.width/2)*outerRadi2}" 
											startAngle="{wedgeLayout.currentReference['startAngle']}" arc="{wedgeScale.valueToLayout(outerWedgeLayout.currentValue)-angleGap}"/>
									</layouts:geometry>
									<layouts:modifiers>
										<layouts:PropertyModifier property="arc" modifier="{outerWedgeScale.valueToLayout(outerWedgeLayout.currentValue)}" modifierOperator="none"/>
										<layouts:PropertyModifier property="startAngle" modifier="{(outerWedgeLayout.currentIndex>0) ? outerWedgeScale.valueToLayout(outerWedgeLayout.dataItems[outerWedgeLayout.currentIndex-1][outerWedgeLayout.dataField]) : 0}" modifierOperator="add"/> 	
									</layouts:modifiers>  
								</layouts:GeometryRepeater>
							</axiis:referenceRepeater>
							<axiis:drawingGeometries>
									<!-- outerWedgeRenderer:  the drawing geometry for the outer ring of wedges -->
									<geometry:Wedge id="outerWedgeRenderer"
									    innerRadius="{outerWedgeLayout.currentReference['innerRadius']}" outerRadius="{outerWedgeLayout.currentReference['outerRadius']}"
			 							startAngle="{outerWedgeLayout.currentReference['startAngle']}" arc="{outerWedgeLayout.currentReference['arc']}" 
			 							centerX="{outerWedgeLayout.currentReference['centerX']}" centerY="{outerWedgeLayout.currentReference['centerY']}"
										fill="{outerWedgeFill}">
										<geometry:stroke>
											<degrafa:SolidStroke color="0" alpha=".6" pixelHinting="true"/>
										</geometry:stroke>
										<!--<geometry:filters>
											<mx:DropShadowFilter angle="{outerWedgeLayout.currentReference['startAngle']-180}" blurX="10" blurY="10" alpha=".6"/>
										</geometry:filters>-->
									</geometry:Wedge>
									 	
									<degrafa:RegularRectangle width="{outerRadius.value}" x="{center.value}" y="{center.value}" height="1">
										<degrafa:geometry>
											<degrafa:RasterText id="outerLabel" fontFamily="Myriad Pro"  fontSize="11" text="{outerWedgeLayout.currentLabel}" height="15"
												right="0" width="{outerRadius.value}" align="right"  textColor="{outerWedgePalette.currentColor}">
												<degrafa:transform>
													<degrafa:RotateTransform registrationPoint="topRight" angle="{(transposeLabel(outerWedgeLayout.currentReference)==true) ? 180:0}"/>
												</degrafa:transform>
											</degrafa:RasterText>
										</degrafa:geometry>
										<degrafa:transform>
											<degrafa:RotateTransform angle="{outerWedgeLayout.currentReference['startAngle'] + outerWedgeLayout.currentReference['arc']/2+((transposeLabel(outerWedgeLayout.currentReference)==true) ? 3:-3)}" 
													registrationPoint="topLeft"/>
										</degrafa:transform>
									</degrafa:RegularRectangle>
									
							</axiis:drawingGeometries>
							
							<axiis:states>
								<axiis:State enterStateEvent="mouseOver"
									exitStateEvent="mouseOut"
									properties="{['color','outerRadius','textColor']}"
									values="{[colorFunction,outerRadius.value*1.2,0xFFFFFF]}"
									targets="{[outerWedgeFill,outerWedgeRenderer,outerLabel]}"/>
							</axiis:states>
							
						</axiis:AbsoluteLayout>
					</axiis:layouts>
					
					<axiis:states>
						<axiis:State enterStateEvent="mouseOver"
							exitStateEvent="mouseOut" propagateToDescendents="true"
							properties="{['color','color']}"
							values="{[colorFunction,colorFunction]}"
							targets="{[outerWedgeFill,wedgeFillStop1]}"/>
					</axiis:states>
					
				</axiis:AbsoluteLayout>
			</axiis:layouts>
			
			<axiis:palettes>
				<paint:LayoutAutoPalette colorFrom="0xD20000" colorTo="0x0000BD" target="{wedgeLayout}" id="wedgePalette"/>
				<paint:LayoutAutoPalette colorFrom="{wedgePalette.currentColor | 0x2B2B11}" colorTo="{wedgePalette.currentColor | 0x151511}" target="{outerWedgeLayout}" id="outerWedgePalette"/>
			</axiis:palettes>
			
			<axiis:fills>
				<degrafa:RadialGradientFill  id="wedgeFill" cx="{wedgeLayout.width/2}" cy="{wedgeLayout.width/2}" radius="{(wedgeLayout.width/2)*innerRadi2}">
					<degrafa:GradientStop color="{wedgePalette.currentColor | 0x333333}" ratio=".6" />
					<degrafa:GradientStop  color="{wedgePalette.currentColor}" id="wedgeFillStop1" ratio=".92"/>
					<degrafa:GradientStop  color="{wedgePalette.currentColor &amp; -0x352234}" ratio="1"/>
				</degrafa:RadialGradientFill>
				<degrafa:SolidFill color="{wedgePalette.currentColor}" alpha="1"/>
				<degrafa:SolidFill color="{outerWedgePalette.currentColor}" id="outerWedgeFill" alpha="1"/>
				<degrafa:SolidFill color="0xFFFF00" id="rollOverFill0" alpha=".9"/>
				<degrafa:SolidFill color="0xFF00FF" id="rollOverFill1" alpha=".9"/>
			</axiis:fills>
			
		</axiis:DataCanvas>		

</mx:Application>
