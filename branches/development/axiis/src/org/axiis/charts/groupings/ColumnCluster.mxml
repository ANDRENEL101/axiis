<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2009 Team Axiis

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->
<!---
	ColumnCluster groups a series of vertical columns horizontally
	and labels them. This class is intended to be used to produce
	multi-series column charts.
-->
<groupings:GroupingBase xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:degrafa="http://www.degrafa.com/2007" name="outerlayout"
	xmlns:layouts="org.axiis.layouts.*"
	xmlns:scale="org.axiis.layouts.scale.*"
	xmlns:groupings="org.axiis.charts.groupings.*"
	xmlns:utils="org.axiis.utils.*"
	xmlns:utils1="org.axiis.layouts.utils.*"
	xmlns:states="org.axiis.states.*">
	
	<!-- public variables -->
	<mx:Script>
		<![CDATA[
			import mx.events.PropertyChangeEvent;
			import org.axiis.core.ILayout;
			import com.degrafa.core.IGraphicsStroke;
			import com.degrafa.core.IGraphicsFill;

			[Bindable]
			/**
			 * A function that is used to determine how each item in the
			 * dataProvider should be labeled.
			 * 
			 * <p>
			 * The function takes a single parameter, the Object to be plotted,
			 * and should return the String that should be placed on the axis.
			 * The default implementation assumes that each Object in the
			 * dataProvider is numeric, rounds that number, and returns the
			 * that value as a String.
			 * </p> 
			 */
			public var labelFunction:Function;
				
			[Bindable(event="showValueLabelChange")]
			/**
			 * Whether or not the labels indicating the the value each bar
			 * represents are shown.
			 */ 
			public function get showValueLabel():Boolean
			{
				return _showValueLabel;
			}
			public function set showValueLabel(value:Boolean):void
			{
				if(value != _showValueLabel)
				{
					_showValueLabel = value;
					dispatchEvent(new Event("showValueLabelChange"));
					invalidate();
				}
			}
			private var _showValueLabel:Boolean = true;
		]]>
	</mx:Script>
	
	<!--- @private -->
	<mx:Number id="percentGap">.05</mx:Number>
	
	<!---
		The scale used to determine the height of each column.
	-->
	<scale:LinearScale id="verticalScale"/>
	
	<!--- @private -->	
	<utils:NumericExpression id="labelLayout" value="{column.y+column.height+label.width+5+(currentValue >0 ? 0:-column.height-label.width-10)}"/>
	
	<!--- @private -->
	<utils:NumericExpression id="valueLabelLayout" value="{column.y-valueLabel.height-3 + (currentValue > 0 ? 0:column.height+valueLabel.height+3)}"/>

	<groupings:referenceRepeater>
		<utils1:GeometryRepeater>
			<utils1:geometry>
				<degrafa:RegularRectangle x="0" y="0" width="{(width / itemCount) - (width * percentGap/2)}" height="{height}" enableEvents="false"/>
			</utils1:geometry>
			<utils1:modifiers>
				<utils1:PropertyModifier property="x" modifier="{width/itemCount}" modifierOperator="add"/>
			</utils1:modifiers>
		</utils1:GeometryRepeater>
	</groupings:referenceRepeater>

	<groupings:drawingGeometries>
			
		<!--- @private -->
		<degrafa:RegularRectangle id="column"
				x="{currentReference.x}"
				y="{((currentValue >= 0) ? currentReference.height-this.verticalScale.valueToLayout(currentValue) : currentReference.height-this.verticalScale.valueToLayout(0))}"
				width="{Math.max(15,currentReference.width)}"
				height="{(currentValue > 0 ? this.verticalScale.valueToLayout(currentValue)-this.verticalScale.valueToLayout(0) : this.verticalScale.valueToLayout(0)-this.verticalScale.valueToLayout(currentValue)) }"
				fill="{fill}"
				stroke="{stroke}">
		</degrafa:RegularRectangle>
		

		<!--- @private -->
		<degrafa:RasterText  htmlText="{(currentLabel) ? currentLabel: ' '}"  textColor="{fontColor}" visible="{showLabel}" id="label"
			x="{currentReference.x+(currentReference.width-label.height)/2}" height="20"  y="{labelLayout.value}"  width="100"
			fontSize="{fontSize}"  align="{(currentValue &lt; 0) ? 'left' : 'right'}" fontFamily="{fontFamily}" fontWeight="{fontWeight}">
			<degrafa:transform>
				<degrafa:RotateTransform angle="-90" registrationPoint="topLeft"/>
			</degrafa:transform>
		</degrafa:RasterText>
		<!--- @private -->	
		<degrafa:RasterText  htmlText="{(labelFunction != null) ? labelFunction.call(this,currentDatum) : (currentValue ? currentValue:' ')}"  textColor="{dataFontColor}" visible="{showDataLabel}" id="valueLabel"
			x="{currentReference.x+(currentReference.width-valueLabel.textWidth)/2}" height="20"  y="{valueLabelLayout.value}" 
			fontSize="{dataFontSize}"  align="left" fontFamily="{dataFontFamily}" fontWeight="{dataFontWeight}"/>

	</groupings:drawingGeometries>
	<!--<layouts:states>
		<states:State enterStateEvent="mouseOver" exitStateEvent="mouseOut"  targets="{[column,label]}"  properties="{['fill','textColor']}" values="{[stateFill,0xFFFFFF]}" />
	</layouts:states>-->
</groupings:GroupingBase>
