<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2009 Team Axiis

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->

<!---
	HAxis renders values from left to right between a minimum and maximum value,
	and is intended to be rendered beneath or above other layouts to provide a
	point of reference for those visualizations.
	
	<p>
	HAxis can optionally label each major tick mark or render gridlines
	aligned to the axis itself.
	</p>
-->
<core:BaseLayout xmlns="*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:layouts="org.axiis.layouts.*" 
	xmlns:degrafa="http://www.degrafa.com/2007" 
	xmlns:scale="org.axiis.layouts.scale.*"
	xmlns:utils="org.axiis.utils.*" 
	itemPreDraw="onItemPreDraw();"
	xmlns:core="org.axiis.core.*"
	xmlns:utils1="org.axiis.layouts.utils.*">
    
	<mx:Script>
		<![CDATA[
			import com.degrafa.core.IGraphicsStroke;
			import org.axiis.layouts.scale.IScale;
			
			private function onValueChanged():void {
				if (this.width==0 || isNaN(this.width)) return;
				//First determine the minor tick interval
				
				var tempArray:Array=new Array();
				
				_totalMajorTicks=Math.floor(this.width/majorTickSpacing);
				var totalMinorTicks:int=Math.floor((this.width/_totalMajorTicks)/tickGap)*_totalMajorTicks;
			
				_majorTickInterval=totalMinorTicks/_totalMajorTicks;
				 
				_gapStep=this.width/totalMinorTicks;
				
				for (var i:int=0;i<totalMinorTicks+1;i++) {
					tempArray.push(i);
				}
				this.dataProvider=tempArray;
				
				gridRect.width=width/_totalMajorTicks;
			}
			
			private function onItemPreDraw():void {
				label.fontFamily=fontFamily;
				label.x=currentReference.x-(label.textWidth)/2;
				label.y=this.height;
			}
			
			/**
			 * A function that is used to determine how each item in the
			 * dataProvider should be labeled along the axis.
			 * 
			 * <p>
			 * The function takes a single parameter, the Object to be plotted,
			 * and should return the String that should be placed on the axis.
			 * The default implementation assumes that each Object in the
			 * dataProvider is numeric, rounds that number, and returns the
			 * that value as a String.
			 * </p> 
			 */
			public function get labelFunction():Function {
				return _labelFunction;
			}
			public function set labelFunction(value:Function):void {
				_labelFunction=value;
			}
			private var _labelFunction:Function=internalLabelFunction;
			
			private function internalLabelFunction(value:Object):String {
				return (Math.round(Number(value)).toString());
			}
			
			[Bindable]
			private var _totalMajorTicks:int;
			
			[Bindable] 
			private var _gapStep:Number;
			
			[Bindable]
			private var _majorTickInterval:Number;
			
			[Bindable]
			private var _labelInterval:Number;
			
			[Bindable]
			/**
			 * The stroke that should be used to render the grid lines
			 * running across this axis.
			 */
			public var gridStroke:com.degrafa.core.IGraphicsStroke;

		]]>
	</mx:Script>
	
	<!---
		Whether or not the labels on this axis are shown.
	-->
	<mx:Boolean id="showLabels">true</mx:Boolean>
	
	<!-- TODO should this be renamed to minorTickSpacing -->
	<!---
		The space between successive minor tick marks.
	-->
	<mx:Number id="tickGap">4</mx:Number>
	
	<!---
		The space between successive major tick marks.
	-->
	<mx:Number id="majorTickSpacing">35</mx:Number>
	
	<!---
		The length of each major tick mark in pixels.
	-->
	<mx:Number id="majorTickLength">12</mx:Number>
	
	<!---
		The length of each minor tick mark in pixels.
	-->
	<mx:Number id="minorTickLength">6</mx:Number>
	
	<!-- TODO it is awkward that we're specifying color and alpha here while in
		most other places we just specify a fill.
	-->
	<!---
		The background color of the grid aligned to this axis.
	-->
	<mx:Number id="gridFillColor">0xFFFFFF</mx:Number>
	
	<!---
		The alpha of the grid aligned to this axis.
	-->
	<mx:Number id="gridFillAlpha">.1</mx:Number>
	
	<!---
		Whether or not grid cells are displayed.
	-->
	<mx:Boolean id="showGridArea">true</mx:Boolean>
	
	<!---
		Whether or not lines are drawn between grid cells.
	-->
	<mx:Boolean id="showGridLine">true</mx:Boolean>
	
	<!-- TODO This should be an IScale -->
	<!---
		The IScale that maps data values to layout coordinates for this axis.
	-->	
	<scale:AbstractScale id="horizontalScale"/>
	
	<!---
		The stroke used to render each tick mark.
	-->
	<degrafa:SolidStroke id="tickStroke"/>
	
	<!---
		The name of the font used to render the tick mark labels.
	-->
	<mx:String id="fontFamily">Arial</mx:String>
	
	<!---
		The size of the font used to render the tick mark labels.
	-->
	<mx:Number id="fontSize">12</mx:Number>
	
	<!---
		The color of the tick mark labels.
	-->
	<mx:Number id="fontColor">0</mx:Number>
	
	<!---
		The weight (normal or bold) of the tick mark labels.
	-->
	<mx:String id="fontWeight">normal</mx:String>
	
	<!--- @private -->
	<utils:BooleanExpression id="showLabel" value="{ (showLabels &amp;&amp; (showMajorTick.value==true))}"/>
	
	<!--- @private -->
	<utils:BooleanExpression id="showMinorTick" value="{ !(showMajorTick.value==true)}"/>
	
	<!--- @private -->
	<utils:BooleanExpression id="showMajorTick" value="{(majorTickSpacing > 0 &amp;&amp; (this.currentIndex % _majorTickInterval) == 0)}"/>
	
	<!--- @private -->
	<utils:BooleanExpression id="showGrid" value="{(((this.currentIndex+_majorTickInterval*2) % (_majorTickInterval*2))==0 &amp;&amp; currentIndex &lt; itemCount)}"/>
	
	<!--- @private -->
	<utils:NumericExpression id="repeaterCount" value="{Math.floor(this.width)}" valueChanged="onValueChanged();" />
	
	<!--- @private -->
	<degrafa:SolidFill id="gridFill" color="{gridFillColor}" alpha="{gridFillAlpha}"/>
	
	<core:referenceRepeater>
		<utils1:GeometryRepeater> 
			<utils1:geometry>
				<degrafa:Line y="0" y1="0" height="{this.height}" x="0" x1="0" width="{this.width}"/>
			</utils1:geometry>
			<utils1:modifiers>
				<utils1:PropertyModifier property="x" modifier="{_gapStep}" modifierOperator="add"/>
			</utils1:modifiers>
		</utils1:GeometryRepeater>
	</core:referenceRepeater>
	<core:drawingGeometries>
		<degrafa:RegularRectangle y="0"  x="{currentReference.x}" id="gridRect"
			height="{height}" 
			visible="{showGrid.value &amp;&amp; showGridArea}" fill="{gridFill}"/>				  

		<!--- @private -->
		<degrafa:Line id="gridLine"  y="0" y1="{height}"  x="{currentReference.x+gridStroke.weight/2}" x1="{currentReference.x+gridStroke.weight/2}" 
			visible="{showGrid.value &amp;&amp; showGridLine}"
			stroke="{gridStroke}"/>				  

		<!--- @private -->
		<degrafa:Line id="minorTick" stroke="{tickStroke}"
			y="{height}" y1="{height-minorTickLength}"  visible="{showMinorTick.value}"
			x="{currentReference.x}" x1="{currentReference.x}"/>
			
		<!--- @private -->
		<degrafa:Line id="majorTick" stroke="{tickStroke}" 
			y="{height}" y1="{height-majorTickLength}" visible="{showMajorTick.value}"
			x="{currentReference.x}" x1="{currentReference.x}"/>
			
		<!--- @private -->
		<degrafa:RasterText id="label" align="right" autoSizeField="true"
			fontFamily="fontFamily" fontSize="{fontSize}" fontWeight="{fontWeight}" textColor="{fontColor}"
			text="{_labelFunction(Number(horizontalScale.layoutToValue(horizontalScale.minLayout+currentReference.x)))}" visible="{showLabel.value}"/>
	</core:drawingGeometries>

</core:BaseLayout>