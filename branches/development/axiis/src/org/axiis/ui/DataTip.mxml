<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns="com.degrafa.*" xmlns:mx="http://www.adobe.com/2006/mxml" implements="mx.core.IToolTip" xmlns:geometry="com.degrafa.geometry.*" xmlns:degrafa="http://www.degrafa.com/2007">
	<mx:Script>
		<![CDATA[
			import org.axiis.core.IAxiisRenderer;
			import mx.core.UIComponent;
			/**
			 *  A Rectangle that specifies the size and position
			 *  of the base drawing surface for this tooltip.
			 */
			override public function get screen():Rectangle {
				return new Rectangle(this.x,this.y,this.width,this.height);
			}
		
			//----------------------------------
			//  text
			//----------------------------------
		
			private var _text:String;
			
			[Bindable]
			/**
			 *  The text that appears in the tooltip.
			 */
			public function get text():String {
				return _text;
			}
			
			/**
			 *  @private
			 */
			public function set text(value:String):void {
				_text=value;
			}
			
			private var _calloutX:Number;
			
			public function set calloutX(value:Number):void {
				_calloutX=value;
			}
			
			public function get calloutX():Number {
				return _calloutX;
			}
			
			private var _calloutY:Number;
			
			public function set calloutY(value:Number):void {
				_calloutY=value;
			}
			
			public function get calloutY():Number {
				return _calloutY;
			}
			
			public var calloutWidthRatio:Number=.15;
			
			[Bindable]
			protected var w:Number;
			
			[Bindable]
			protected var h:Number;
			
			protected var content:UIComponent;
			
			public var value:Object;
			
			public var index:int;
			
			[Bindable(event="contentFactoryChange")]
			/**
			 * TODO Document contentFactory
			 */
			public function get contentFactory():IFactory
			{
				return _contentFactory;
			}
			public function set contentFactory(value:IFactory):void
			{
				if(value != _contentFactory)
				{
					_contentFactory = value;
					dispatchEvent(new Event("contentFactoryChange"));
				}
			}
			private var _contentFactory:IFactory;
			
			override protected function createChildren() : void
			{
				super.createChildren();
				if(!content)
				{
					if(contentFactory)
						content = UIComponent(contentFactory.newInstance());
					else
						content = new TextDataTipContent();
					IAxiisRenderer(content).data = data;
					IAxiisRenderer(content).value = value;
					IAxiisRenderer(content).label = label;
					IAxiisRenderer(content).index = index;
					contentHolder.addChild(content);
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				width = measuredWidth;
				height = measuredHeight;
				w=measuredWidth;
				h=measuredHeight;
				this.graphics.clear();
				super.updateDisplayList(measuredWidth,measuredHeight);
				ballon.draw(this.graphics,new Rectangle(0,0,w,h));
			}
		]]>
	</mx:Script>
	<GeometryGroup width="{w}" height="{h}">
		 <geometry:CalloutBalloon id="ballon" 
			width="{w}"
			height="{h}"
		 	topLeftRadius="6" topRightRadius="6" bottomLeftRadius="6" bottomRightRadius="6"
		 	calloutX="{calloutX}" calloutY="{h-calloutY}"  calloutWidthRatio="{calloutWidthRatio}">
			<geometry:fill> 
				<degrafa:LinearGradientFill angle="90">
					<degrafa:GradientStop color="0xEEEEEE"/>
					<degrafa:GradientStop color="0xAAAAAA"/>
				</degrafa:LinearGradientFill>
			</geometry:fill>
			<geometry:stroke>
				<degrafa:SolidStroke color="0x999999"/>
			</geometry:stroke>
		</geometry:CalloutBalloon>
	</GeometryGroup>
	<mx:VBox id="contentHolder" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
</mx:Canvas>
