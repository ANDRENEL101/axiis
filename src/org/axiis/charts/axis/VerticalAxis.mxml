<?xml version="1.0" encoding="utf-8"?>
<layouts:BaseLayout xmlns="*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:layouts="org.axiis.layouts.*" 
	xmlns:degrafa="http://www.degrafa.com/2007" 
	xmlns:scale="org.axiis.layouts.scale.*"
	xmlns:utils="org.axiis.utils.*" 
	itemPreDraw="onItemPreDraw();"
	xmlns:core="org.axiis.core.*">
    
	<mx:Script>
		<![CDATA[
			import org.axiis.layouts.scale.IScale;
			
			private function onValueChanged():void {
				if (this.height==0 || isNaN(this.height)) return;
				//First determine the minor tick interval
				
				var tempArray:Array=new Array();
				
				_totalMajorTicks=Math.floor(this.height/majorTickSpacing);
				var totalMinorTicks:int=Math.floor((this.height/_totalMajorTicks)/tickGap)*_totalMajorTicks;
			
				_majorTickInterval=totalMinorTicks/_totalMajorTicks;
				
				_gapStep=this.height/totalMinorTicks;
				
				for (var i:int=0;i<totalMinorTicks+1;i++) {
					tempArray.push(i);
				}
				this.dataProvider=tempArray;
				
				gridRect.height=height/_totalMajorTicks;
			}
			
			private function onItemPreDraw():void {
				label.fontFamily=fontFamily;
				label.x=-label.textWidth-5;
				label.y=currentReference.y-label.height/2;
			}
			
			
			public function set labelFunction(value:Function):void {
				_labelFunction=value;
			}
			
			public function get labelFunction():Function {
				return _labelFunction;
			}
			
			private var _labelFunction:Function=internalLabelFunction;
			
			private function internalLabelFunction(value:Object):String {
				return (Math.round(Number(value)).toString());
			}
			
			[Bindable]
			private var _totalMajorTicks:int;
			
			[Bindable] 
			private var _gapStep:Number;
			
			[Bindable]
			private var _majorTickInterval:Number;
			
			[Bindable]
			private var _labelInterval:Number;
			

		]]>
	</mx:Script>
	
	<mx:Boolean id="showLabels">true</mx:Boolean>
	<mx:Number id="tickGap">4</mx:Number>
	<mx:Number id="majorTickSpacing">35</mx:Number>
	<mx:Number id="majorTickLength">12</mx:Number>
	<mx:Number id="minorTickLength">6</mx:Number>
	<mx:Number id="gridFillColor">0xFFFFFF</mx:Number>
	<mx:Number id="gridFillAlpha">.1</mx:Number>
		
	<scale:AbstractScale id="verticalScale"/>
	
	<degrafa:SolidStroke id="tickStroke"/>
	
	<mx:String id="fontFamily">Arial</mx:String>
	<mx:Number id="fontSize">12</mx:Number>
	<mx:Number id="fontColor">0</mx:Number>
	<mx:String id="fontWeight">normal</mx:String>
	
	<utils:BooleanExpression id="showLabel" value="{ (showLabels &amp;&amp; (showMajorTick.value==true))}"/>
	<utils:BooleanExpression id="showMinorTick" value="{ !(showMajorTick.value==true)}"/>
	<utils:BooleanExpression id="showMajorTick" value="{(majorTickSpacing > 0 &amp;&amp; (repeater.currentIteration % _majorTickInterval) == 0)}"/>
	<utils:BooleanExpression id="showGrid" value="{((repeater.currentIteration % (_majorTickInterval*2))==0 &amp;&amp; currentIndex &lt; itemCount-1)}"/>
	<utils:NumericExpression id="repeaterCount" value="{Math.floor(this.height)}" valueChanged="onValueChanged();" />
	
	<degrafa:SolidFill id="gridFill" color="{gridFillColor}" alpha="{gridFillAlpha}"/>
	
	<layouts:referenceRepeater>
		<core:GeometryRepeater id="repeater"> 
			<core:geometry>
				<degrafa:Line id="refLine" x="0" x1="{this.width}" height="{this.height}" y="0" y1="0" width="{this.width}"/>
			</core:geometry>
			<core:modifiers>
				<core:PropertyModifier property="y" modifier="{_gapStep}" modifierOperator="add"/>
			</core:modifiers>
		</core:GeometryRepeater>
	</layouts:referenceRepeater>
	<layouts:drawingGeometries>
		<degrafa:RegularRectangle x="0"  y="{currentReference['y']}" id="gridRect"
			width="{width}" 
			visible="{(showGrid.value)}" fill="{gridFill}">				  
		</degrafa:RegularRectangle>
		<degrafa:Line id="minorTick" stroke="{tickStroke}"
			x="0" x1="{minorTickLength}"  visible="{showMinorTick.value}"
			y="{currentReference['y']}" y1="{currentReference['y']}"
			/>
		<degrafa:Line id="majorTick" stroke="{tickStroke}" 
			x="0" x1="{majorTickLength}" visible="{showMajorTick.value}"
			y="{currentReference['y']}" y1="{currentReference['y']}"
			/>
		<degrafa:RasterText id="label" align="right" autoSizeField="true"
			fontFamily="fontFamily" fontSize="{fontSize}" fontWeight="{fontWeight}" textColor="{fontColor}"
			text="{_labelFunction(Number(verticalScale.layoutToValue(verticalScale.maxLayout-currentReference['y'])))}" visible="{showLabel.value}"/>
	</layouts:drawingGeometries>

</layouts:BaseLayout>